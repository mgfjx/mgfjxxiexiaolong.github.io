{"meta":{"title":"mgfjx","subtitle":null,"description":null,"author":"mgfjxxiexiaolong","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-01-17T08:27:48.000Z","updated":"2017-01-18T07:55:25.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"Shell"},{"title":"关于我","date":"2017-01-17T08:25:55.000Z","updated":"2017-01-17T08:25:55.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"我的个人简介"},{"title":"改网页无法正常显示！请稍后再试！","date":"2017-01-17T08:54:31.000Z","updated":"2017-01-17T08:55:06.000Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":""}],"posts":[{"title":"Shell 使用小技巧","slug":"Shell使用小技巧","date":"2017-01-18T07:28:04.000Z","updated":"2017-01-19T01:07:58.000Z","comments":true,"path":"2017/01/18/Shell使用小技巧/","link":"","permalink":"http://yoursite.com/2017/01/18/Shell使用小技巧/","excerpt":"","text":"1、sed &#39;s/}/text}/g&#39; file:在文件file文件中的所有}之前添加text文本.","categories":[{"name":"Shell","slug":"Shell","permalink":"http://yoursite.com/categories/Shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"UIView的生命周期","slug":"UIView的生命周期","date":"2017-01-13T16:00:00.000Z","updated":"2017-01-18T07:47:42.000Z","comments":true,"path":"2017/01/14/UIView的生命周期/","link":"","permalink":"http://yoursite.com/2017/01/14/UIView的生命周期/","excerpt":"探寻UIView的生命周期。我们知道view的创建有init(或new)的方法，销毁时会自动执行dealloc方法，但是UIView的生命周期到底是怎样的呢？我们一步一步来。 首先新建一个项目并创建一个TestView继承自UIView： 再创建TestViewController继承自UIViewController，用于承载TestView(方便后面测试view销毁时间)：","text":"探寻UIView的生命周期。我们知道view的创建有init(或new)的方法，销毁时会自动执行dealloc方法，但是UIView的生命周期到底是怎样的呢？我们一步一步来。 首先新建一个项目并创建一个TestView继承自UIView： 再创建TestViewController继承自UIViewController，用于承载TestView(方便后面测试view销毁时间)：在Main.storyboard中给默认的控制器ViewController添加导航：在ViewController.m中添加如下代码用于跳转操作：123456789101112131415161718- (void)viewDidLoad &#123; [super viewDidLoad]; UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom]; btn.frame = CGRectMake(100, 100, 100, 100); btn.backgroundColor = [UIColor colorWithRed:0.489 green:0.548 blue:0.898 alpha:1.000]; [btn setTitle:@&quot;push&quot; forState:UIControlStateNormal]; [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal]; [btn addTarget:self action:@selector(pushTestViewVC:) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:btn];&#125;- (void)pushTestViewVC:(UIButton *)sender&#123; TestViewController *vc = [[TestViewController alloc] init]; [self.navigationController pushViewController:vc animated:YES]; &#125; 在TestViewController.m中添加如下代码:12345678910- (void)viewDidLoad&#123; [super viewDidLoad]; self.view.backgroundColor = [UIColor lightGrayColor]; TestView *view = [[TestView alloc] init]; view.frame = CGRectMake(8, 100, self.view.bounds.size.width - 8*2, 250); view.backgroundColor = [UIColor colorWithRed:0.101 green:0.502 blue:0.427 alpha:1.000]; [self.view addSubview:view]; &#125; ok,到这儿准备工作完成。运行一下： 查看UIViewapi，常用的加载时机大概如下：- (void)layoutSubviews- (void)didAddSubview:(UIView *)subview;- (void)willRemoveSubview:(UIView *)subview;- (void)willMoveToSuperview:(nullable UIView *)newSuperview;- (void)didMoveToSuperview;- (void)willMoveToWindow:(nullable UIWindow *)newWindow;- (void)didMoveToWindow;- (void)removeFromSuperview- (void)dealloc一一在TestView.m中实现:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#import &quot;TestView.h&quot;@interface TestView ()&#123; NSInteger count;&#125;@end@implementation TestView- (instancetype)init&#123; self = [super init]; if (self) &#123; count = 0; &#125; return self;&#125;- (void)layoutSubviews&#123; [super layoutSubviews]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)didAddSubview:(UIView *)subview&#123; [super didAddSubview:subview]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)willRemoveSubview:(UIView *)subview&#123; [super willRemoveSubview:subview]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)willMoveToSuperview:(nullable UIView *)newSuperview&#123; [super willMoveToSuperview:newSuperview]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)didMoveToSuperview&#123; [super didMoveToSuperview]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)willMoveToWindow:(nullable UIWindow *)newWindow&#123; [super willMoveToWindow:newWindow]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)didMoveToWindow&#123; [super didMoveToWindow]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)removeFromSuperview&#123; [super removeFromSuperview]; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;- (void)dealloc&#123; count++; NSLog(@&quot;%@ ==&gt; %ld&quot;,NSStringFromSelector(_cmd),count);&#125;@end *_cmd表示当前方法的SEL，既执行该方法时打印方法名* 运行，点push，控制台打印如下： 然后点击navigation的back按钮： 我们发现- (void)didAddSubview:(UIView *)subview;- (void)willRemoveSubview:(UIView *)subview;这两个是需要有子视图才能执行，暂时不做讨论。可以看出上面方法中只会执行一次的方法有removeFromSuperview、dealloc两个方法(layoutSubviews在子视图布局变动时会多次调用)，所以可以在这两个方法中执行释放内存等操作(e.g:移除观察者，定时器等)。 OK，下面我们讨论关于subView的几个方法，首先在TestViewController.m中实现点击按钮给testView添加子视图的功能： 123456789101112131415161718192021222324252627282930313233#import &quot;TestViewController.h&quot;#import &quot;TestView.h&quot;@interface TestViewController ()&#123; TestView *testView;&#125;@end@implementation TestViewController- (void)viewDidLoad&#123; [super viewDidLoad]; self.view.backgroundColor = [UIColor lightGrayColor]; UIBarButtonItem *item = [[UIBarButtonItem alloc] initWithTitle:@&quot;addSubView&quot; style:UIBarButtonItemStylePlain target:self action:@selector(addTestViewSubView)]; self.navigationItem.rightBarButtonItem = item; TestView *view = [[TestView alloc] init]; view.frame = CGRectMake(8, 100, self.view.bounds.size.width - 8*2, 250); view.backgroundColor = [UIColor colorWithRed:0.101 green:0.502 blue:0.427 alpha:1.000]; [self.view addSubview:view]; testView = view; &#125;- (void)addTestViewSubView&#123; UIView *view = [[UIView alloc] initWithFrame:CGRectMake(50, 50, 100, 100)]; view.backgroundColor = [UIColor lightGrayColor]; view.tag = 100; [testView addSubview:view]; &#125;@end 点击push后点击按钮添加子视图：可见didAddSubview和layoutSubviews都调用了，那我们pop回去：willRemoveSubview是在dealloc后面执行的，通过断点我们发现确实是最后执行的。而且如果有多个子视图，willRemoveSubview会循环执行，直到移除所有子视图。 以上执行顺序比较清楚，主要是了解UIView的各个时机便于我们进行相关操作。关于：- (void)willMoveToSuperview:(nullable UIView *)newSuperview;- (void)willMoveToWindow:(nullable UIWindow *)newWindow;这俩个方法可以根据参数是否为nil判断是创建操作还是销毁操作，nil则为销毁，反之，则为创建；- (void)didMoveToSuperview;这个方法可以根据self.superview的值判定，nil则为销毁，反之，则为创建。- (void)didMoveToWindow;这个方法可以根据self.superview的值判定，nil则为创建，反之，则为销毁。(注意这个方法和上面的是相反的) 如有错误的地方，麻烦指正。","categories":[{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"}]}]}